<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<arg name="cloud_in" default="/camera/depth/color/points" doc="Input point cloud topic" />
	<arg name="frame_id" default="map" doc="Frame ID for the map" />
	<arg name="resolution" default="0.025" doc="Resolution of the octomap" />
	<arg name="max_range" default="5.0" doc="Maximum range for the sensor model" />

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="$(arg resolution)" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="$(arg frame_id)" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg max_range)" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="$(arg cloud_in)" />
	
	</node>
</launch>
